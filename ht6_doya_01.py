import matplotlib.pyplot as plt
import networkx as nx
from collections import deque
import heapq

# üîπ –õ—ñ–Ω—ñ—ó –º–µ—Ç—Ä–æ
blue_line = [
    "–ì–µ—Ä–æ—ó–≤ –î–Ω—ñ–ø—Ä–∞", "–ú—ñ–Ω—Å—å–∫–∞", "–û–±–æ–ª–æ–Ω—å", "–ü–æ—á–∞–π–Ω–∞", "–¢–∞—Ä–∞—Å–∞ –®–µ–≤—á–µ–Ω–∫–∞",
    "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤–∞ –ø–ª–æ—â–∞", "–ü–æ—à—Ç–æ–≤–∞ –ø–ª–æ—â–∞", "–ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", "–ü–ª–æ—â–∞ –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ",
    "–û–ª—ñ–º–ø—ñ–π—Å—å–∫–∞", "–ü–∞–ª–∞—Ü –£–∫—Ä–∞—ó–Ω–∞", "–õ–∏–±—ñ–¥—Å—å–∫–∞", "–î–µ–º—ñ—ó–≤—Å—å–∫–∞", "–ì–æ–ª–æ—Å—ñ—ó–≤—Å—å–∫–∞",
    "–í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞", "–í–∏—Å—Ç–∞–≤–∫–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä", "–Ü–ø–æ–¥—Ä–æ–º", "–¢–µ—Ä–µ–º–∫–∏"
]

red_line = [
    "–ê–∫–∞–¥–µ–º–º—ñ—Å—Ç–µ—á–∫–æ", "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞", "–°–≤—è—Ç–æ—à–∏–Ω", "–ù–∏–≤–∫–∏", "–ë–µ—Ä–µ—Å—Ç–µ–π—Å—å–∫–∞",
    "–®—É–ª—è–≤—Å—å–∫–∞", "–ü–æ–ª—ñ—Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç", "–í–æ–∫–∑–∞–ª—å–Ω–∞", "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç",
    "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞", "–•—Ä–µ—â–∞—Ç–∏–∫", "–ê—Ä—Å–µ–Ω–∞–ª—å–Ω–∞", "–î–Ω—ñ–ø—Ä–æ", "–ì—ñ–¥—Ä–æ–ø–∞—Ä–∫", "–õ—ñ–≤–æ–±–µ—Ä–µ–∂–Ω–∞",
    "–î–∞—Ä–Ω–∏—Ü—è", "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞", "–õ—ñ—Å–æ–≤–∞"
]

green_line = [
    "–°–∏—Ä–µ—Ü—å", "–î–æ—Ä–æ–≥–æ–∂–∏—á—ñ", "–õ—É–∫'—è–Ω—ñ–≤—Å—å–∫–∞", "–ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É",
    "–ö–ª–æ–≤—Å—å–∫–∞", "–ü–µ—á–µ—Ä—Å—å–∫–∞", "–î—Ä—É–∂–±–∏ –Ω–∞—Ä–æ–¥—ñ–≤", "–í–∏–¥—É–±–∏—á—ñ", "–°–ª–∞–≤—É—Ç–∏—á",
    "–û—Å–æ–∫–æ—Ä–∫–∏", "–ü–æ–∑–Ω—è–∫–∏", "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞", "–í–∏—Ä–ª–∏—Ü—è", "–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞", "–ß–µ—Ä–≤–æ–Ω–∏–π —Ö—É—Ç—ñ—Ä"
]

# –ü–µ—Ä–µ—Å–∞–¥–∫–∏ –º—ñ–∂ –ª—ñ–Ω—ñ—è–º–∏
transfers = [
    ("–ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞", "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞"),
    ("–ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ", "–•—Ä–µ—â–∞—Ç–∏–∫"),
    ("–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É", "–ü–ª–æ—â–∞ –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ")
]

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è —Å—Ç–∞–Ω—Ü—ñ–π
station_positions = {
    # Red line
    "–ê–∫–∞–¥–µ–º–º—ñ—Å—Ç–µ—á–∫–æ": (-1, 16.5), "–ñ–∏—Ç–æ–º–∏—Ä—Å—å–∫–∞": (0, 15.5), "–°–≤—è—Ç–æ—à–∏–Ω": (1, 14.5),
    "–ù–∏–≤–∫–∏": (2, 13.5), "–ë–µ—Ä–µ—Å—Ç–µ–π—Å—å–∫–∞": (3, 12.5), "–®—É–ª—è–≤—Å—å–∫–∞": (4, 11.5),
    "–ü–æ–ª—ñ—Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —ñ–Ω—Å—Ç–∏—Ç—É—Ç": (5, 11), "–í–æ–∫–∑–∞–ª—å–Ω–∞": (6, 10.5),
    "–£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç": (7, 10), "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞": (8, 9.6), "–•—Ä–µ—â–∞—Ç–∏–∫": (9.4, 9.8),
    "–ê—Ä—Å–µ–Ω–∞–ª—å–Ω–∞": (11, 9.5), "–î–Ω—ñ–ø—Ä–æ": (12, 10.5), "–ì—ñ–¥—Ä–æ–ø–∞—Ä–∫": (13, 11),
    "–õ—ñ–≤–æ–±–µ—Ä–µ–∂–Ω–∞": (14, 11.5), "–î–∞—Ä–Ω–∏—Ü—è": (15, 12), "–ß–µ—Ä–Ω—ñ–≥—ñ–≤—Å—å–∫–∞": (16, 13),
    "–õ—ñ—Å–æ–≤–∞": (17, 14),

    # Blue line
    "–ì–µ—Ä–æ—ó–≤ –î–Ω—ñ–ø—Ä–∞": (10, 17), "–ú—ñ–Ω—Å—å–∫–∞": (10, 16), "–û–±–æ–ª–æ–Ω—å": (10, 15),
    "–ü–æ—á–∞–π–Ω–∞": (10, 14), "–¢–∞—Ä–∞—Å–∞ –®–µ–≤—á–µ–Ω–∫–∞": (10, 13), "–ö–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤–∞ –ø–ª–æ—â–∞": (10, 12),
    "–ü–æ—à—Ç–æ–≤–∞ –ø–ª–æ—â–∞": (10, 11), "–ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ": (9.8, 9.3),
    "–ü–ª–æ—â–∞ –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ": (9.0, 8.4), "–û–ª—ñ–º–ø—ñ–π—Å—å–∫–∞": (8.5, 7.3),
    "–ü–∞–ª–∞—Ü –£–∫—Ä–∞—ó–Ω–∞": (8, 6), "–õ–∏–±—ñ–¥—Å—å–∫–∞": (8, 5), "–î–µ–º—ñ—ó–≤—Å—å–∫–∞": (8, 4),
    "–ì–æ–ª–æ—Å—ñ—ó–≤—Å—å–∫–∞": (8, 3), "–í–∞—Å–∏–ª—å–∫—ñ–≤—Å—å–∫–∞": (8, 2),
    "–í–∏—Å—Ç–∞–≤–∫–æ–≤–∏–π —Ü–µ–Ω—Ç—Ä": (8, 1), "–Ü–ø–æ–¥—Ä–æ–º": (8, 0), "–¢–µ—Ä–µ–º–∫–∏": (8, -1),

    # Green line
    "–°–∏—Ä–µ—Ü—å": (6, 14), "–î–æ—Ä–æ–≥–æ–∂–∏—á—ñ": (7, 13), "–õ—É–∫'—è–Ω—ñ–≤—Å—å–∫–∞": (8, 12),
    "–ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞": (8.6, 10.3), "–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É": (9.6, 8.4), "–ö–ª–æ–≤—Å—å–∫–∞": (10.1, 7.6),
    "–ü–µ—á–µ—Ä—Å—å–∫–∞": (11, 6.8), "–î—Ä—É–∂–±–∏ –Ω–∞—Ä–æ–¥—ñ–≤": (11.8, 6), "–í–∏–¥—É–±–∏—á—ñ": (12.5, 5),
    "–°–ª–∞–≤—É—Ç–∏—á": (13, 4.2), "–û—Å–æ–∫–æ—Ä–∫–∏": (13.8, 3.4), "–ü–æ–∑–Ω—è–∫–∏": (14.6, 2.6),
    "–•–∞—Ä–∫—ñ–≤—Å—å–∫–∞": (15.4, 1.8), "–í–∏—Ä–ª–∏—Ü—è": (16.2, 1), "–ë–æ—Ä–∏—Å–ø—ñ–ª—å—Å—å–∫–∞": (17, 0.5),
    "–ß–µ—Ä–≤–æ–Ω–∏–π —Ö—É—Ç—ñ—Ä": (17.7, 0)
}

# –ü—ñ–¥–ø–∏—Å–∏ —Å—Ç–∞–Ω—Ü—ñ–π (–∑ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏–º–∏ –∑—Å—É–≤–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ—Å–∞–¥–æ–∫)
label_offsets = {
    "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞": (0.2, -0.5), "–ó–æ–ª–æ—Ç—ñ –≤–æ—Ä–æ—Ç–∞": (0.5, 0.4),
    "–•—Ä–µ—â–∞—Ç–∏–∫": (0.5, 0.2), "–ú–∞–π–¥–∞–Ω –ù–µ–∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ": (1, -0.3),
    "–ü–∞–ª–∞—Ü —Å–ø–æ—Ä—Ç—É": (0.7, 0), "–ü–ª–æ—â–∞ –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ": (-1.0, -0.1)
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏—Ö —à–ª—è—Ö—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∞–ª–≥–æ—Ä–∏—Ç–º—É –î–µ–π–∫—Å—Ç—Ä–∏
# heapq	–¥–ª—è —à–≤–∏–¥–∫—ñ—Å—Ç–∏ - –°–∫–ª–∞–¥–Ω—ñ—Å—Ç—å O(log n) VS O(n) –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
def dijkstra_all_paths(graph, start):

    distances = {node: float('inf') for node in graph.nodes}
    distances[start] = 0
    paths = {node: [] for node in graph.nodes}
    paths[start] = [start]

    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        for neighbor in graph.neighbors(current_node):
            weight = graph[current_node][neighbor].get('weight', 1)
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                paths[neighbor] = paths[current_node] + [neighbor]
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances, paths

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ø–æ—à—É–∫—É —à–ª—è—Ö—ñ–≤ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DFS
def dfs_path(graph, start, goal, path=None, visited=None):

    if visited is None:
        visited = set()
    if path is None:
        path = []

    visited.add(start)
    path = path + [start]

    if start == goal:
        return path

    for neighbor in graph.neighbors(start):
        if neighbor not in visited:
            new_path = dfs_path(graph, neighbor, goal, path, visited)
            if new_path:
                return new_path
    return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É —à–ª—è—Ö—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é BFS
def bfs_path(graph, start, goal):

    visited = set()
    queue = deque([[start]])

    while queue:
        path = queue.popleft()
        node = path[-1]
        if node == goal:
            return path
        if node not in visited:
            visited.add(node)
            for neighbor in graph.neighbors(node):
                new_path = path + [neighbor]
                queue.append(new_path)
    return None

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–±–µ—Ä –∑ –≤–∞–≥–∞–º–∏
def add_weighted_edges_realistic(line, weight=2):

    for i in range(len(line) - 1):
        GKM.add_edge(line[i], line[i + 1], weight=weight)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ–±–µ—Ä –º—ñ–∂ —Å—Ç–∞–Ω—Ü—ñ—è–º–∏ –ª—ñ–Ω—ñ—ó
def add_line_edges(line):
    for i in range(len(line) - 1):
        GKM.add_edge(line[i], line[i + 1], line='main')


# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ–∞
GKM = nx.Graph()

add_line_edges(blue_line)
add_line_edges(red_line)
add_line_edges(green_line)
GKM.add_edges_from(transfers, line='transfer')

# üîπ –ö–æ–ª—å–æ—Ä–∏ –≤–µ—Ä—à–∏–Ω
color_map = []
for node in GKM.nodes():
    if node in blue_line:
        color_map.append("dodgerblue")
    elif node in red_line:
        color_map.append("crimson")
    elif node in green_line:
        color_map.append("green")
    else:
        color_map.append("gray")

default_offset_x = 0.2
default_offset_y = 0.3
red_label_offset_y = 0.6

# üîπ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
plt.figure(figsize=(20, 12))
nx.draw_networkx_nodes(GKM, station_positions, node_color=color_map, node_size=200)

main_edges = [(u, v) for u, v, d in GKM.edges(data=True) if d["line"] == "main"]
transfer_edges = [(u, v) for u, v, d in GKM.edges(data=True) if d["line"] == "transfer"]

nx.draw_networkx_edges(GKM, station_positions, edgelist=main_edges, width=2)
nx.draw_networkx_edges(GKM, station_positions, edgelist=transfer_edges, style="dashed", width=2, edge_color="black")

# –ü—ñ–¥–ø–∏—Å–∏
for station, (x, y) in station_positions.items():
    if station in label_offsets:
        dx, dy = label_offsets[station]
        plt.text(x + dx, y + dy, station, fontsize=8, ha='center', va='center')
    elif station in red_line:
        plt.text(x, y + red_label_offset_y, station, fontsize=8, ha='center', va='bottom')
    else:
        plt.text(x + default_offset_x, y + default_offset_y, station, fontsize=8, ha='left', va='center')

# –î–æ–¥–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –ª—ñ–Ω—ñ—ó –∑ –≤–∞–≥–æ—é 2 —Ö–≤
add_weighted_edges_realistic(blue_line, weight=2)
add_weighted_edges_realistic(red_line, weight=2)
add_weighted_edges_realistic(green_line, weight=2)

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∞–≥ —Ä–µ–±–µ—Ä –¥–æ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
edge_labels = nx.get_edge_attributes(GKM, 'weight')

nx.draw_networkx_edge_labels(
    GKM,
    pos=station_positions,
    edge_labels=edge_labels,
    font_size=8,
    label_pos=0.5  # —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –º—ñ—Ç–∫–∏ –ø–æ —Å–µ—Ä–µ–¥–∏–Ω—ñ —Ä–µ–±—Ä–∞
)

# –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
plt.title("–ö–∏—ó–≤—Å—å–∫–µ –º–µ—Ç—Ä–æ ‚Äî –Ω—É —è–∫ –±–∏ :)", fontsize=16)
plt.axis("off")
plt.tight_layout()
plt.show()

# –ê–Ω–∞–ª—ñ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
print("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–∞–Ω—Ü—ñ–π:", GKM.number_of_nodes())
print("–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω—å (—Ä–µ–±–µ—Ä):", GKM.number_of_edges())
print("–°–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç—É–ø—ñ–Ω—å –≤–µ—Ä—à–∏–Ω:", sum(dict(GKM.degree()).values()) / GKM.number_of_nodes())
print("–¢–æ–ø-5 —Å—Ç–∞–Ω—Ü—ñ–π –∑ –Ω–∞–π–±—ñ–ª—å—à–∏–º —Å—Ç—É–ø–µ–Ω–µ–º (–ø–µ—Ä–µ—Å–∞–¥–∫–∏):")
for node, deg in sorted(GKM.degree, key=lambda x: x[1], reverse=True)[:5]:
    print(f"  - {node}: {deg}")

dfs_result = dfs_path(GKM, "–¢–µ—Ä–µ–º–∫–∏", "–õ—ñ—Å–æ–≤–∞")
bfs_result = bfs_path(GKM, "–¢–µ—Ä–µ–º–∫–∏", "–õ—ñ—Å–æ–≤–∞")

print("\n–®–ª—è—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é DFS:", " -> ".join(dfs_result) if dfs_result else "–®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
print("...\n")
print("–®–ª—è—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é BFS:", " -> ".join(bfs_result) if bfs_result else "–®–ª—è—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

# –ü–µ—Ä–µ—Å–∞–¥–∫–∏ ‚Äî 3 —Ö–≤
for u, v in transfers:
    GKM.add_edge(u, v, weight=3)


# –ü—Ä–∏–∫–ª–∞–¥: –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–π–∫–æ—Ä–æ—Ç—à–∏–π —á–∞—Å –º—ñ–∂ –¥–≤–æ–º–∞ —Å—Ç–∞–Ω—Ü—ñ—è–º–∏
start = "–¢–µ—Ä–µ–º–∫–∏"
end = "–õ—ñ—Å–æ–≤–∞"
shortest_time_start, route = dijkstra_all_paths(GKM, start)
shortest_time = shortest_time_start[end]

print("...\n")
print(f"–ß–∞—Å –ø–æ—ó–∑–¥–∫–∏ –∑ {start} –¥–æ {end} –∑–∞ –î–µ–π–∫—Å—Ç—Ä–æ—é: {shortest_time} —Ö–≤")
print("–ú–∞—Ä—à—Ä—É—Ç –∑–∞ –î–µ–π–∫—Å—Ç—Ä–æ—é:", " -> ".join(route[end]) if end in route else "–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")